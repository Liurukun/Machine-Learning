{
  "articles": [
    {
      "path": "about.html",
      "title": "About the class",
      "description": "ECOL6002P, the second semester of an academic year\n\nInstructors: Fanglin Liu\n\nTeaching assistants:\n\nWhen & where: Wednesday and Friday 3,4,5 (9:45-12:10), 3A409\n\nSome notes by Fanglin Liu: https://github.com/flliu315\n",
      "author": [],
      "contents": "\r\nIntroduce of the class\r\nEcology is the study of the relationships between plants/animals, including humans, and their abiotic environment. It seeks to understand the vital connections between living organisms and the world around them.\r\nEcology also provides information about the benefits of ecosystems and how we can use Earth’s resources in ways that leave the environment healthy for future generations.\r\nRead more here\r\nThe distributed sensor networks allow for the acquisition of huge volumes of data on many relevant aspects, ranging from soil and vegetation characteristics, abiotic conditions like weather, to animals’ behavior. The collection of large amounts of data leads to a shift away from frequentist hypothesis testing towards analytics that is more focused on prediction, classification, pattern recognition or anomaly detection. To this end, machine learning techniques are often used, usually by high performance computing.\r\nIn the digital era, researchers are embracing data science, i.e., unifying data processing, statistics, artificial intelligence and their related algorithms to extract knowledge from data. Hence, data science is increasingly becoming an integral part of decision making in many fields, including ecology and wildlife conservation. To keep up with these steps, young scientists and students need to become acquainted with the terms, concepts and methodology of data science, including the integration and pre-processing of data from different sources, and the engineering of informative and discriminating features for creating effective algorithms.\r\nThis class covers the main elements using a data science approach to solve ecological problems. Students will be guided through the main concepts and skills that are required to become a successful data scientist. This class builds upon, and expands, the understanding and skills generated in other courses, and focuses on combining these in an interdisciplinary way to be optimally able to solve ecological problems with a data-driven approach. In the class, students will increase their knowledge and skills that will benefit their future career in academia.\r\nRead more here\r\nPreparing for the class\r\nMake sure to bring your own computer for this class, with access to school wifi and enough battery for three hours of work (or bring your power cable). Any operating system (Windows, Mac, Linux) is OK, as far as you are able to operate it.\r\nInstall the latest version of R and RStudio before you come for the first class - see instructions here.\r\nIf you used R and RStudio before, please make sure that you updated to the version required for this class; instructions on how to update and required R and RStudio versions are here.\r\nIt is essential that we all are using the same version of R and RStudio, to avoid the situation that you will get error messages just because of using outdated program versions.\r\nThis textbook provides many learning resources and reference materials for the class.\r\nExpected learning outcomes\r\nExperience with programming in R is needed to follow and successfully complete this course. The students without prior experience with programming in R are expected to master R programming in the class, including:\r\nMain types of R objects (vector, matrix, data frame, list), reading and exporting data, manipulating data (sorting, merging), creating fully reproducible R script\r\nHow to draw effective scientific figures, including how to choose them and draw them, as well as raster vs vector graphics\r\n\r\nAfter successful completion of this class, students are expected to be able to understand the significance of data science in solving typical ecological problems, including:\r\nunderstand how key features of ecological data influence the selection, training, validation and evaluation of algorithms;\r\nidentify and select machine learning algorithms appropriate to specific ecological problems;\r\napply data science skills (data processing, feature engineering, and machine learning algorithms) to analyse ecological data;\r\ncritically evaluate the results and performance of trained algorithms, and assess the reliability and adequacy of trained algorithms in predicting ecological phenomena;\r\ncreate ecological insight from data using a data science approach.\r\n\r\nFinal evaluation\r\nThe final evaluation consists of three parts:\r\nHomework assignments (30%), see here\r\nActivity in the class, individual work (40%)\r\nFinal presentation (30%), see here\r\n\r\n\r\n\r\n",
      "last_modified": "2023-10-13T23:39:31+08:00"
    },
    {
      "path": "getting_started.html",
      "title": "Working R with Rstudio and linking r-project to github",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\n1. Using Rstudio interact with R\r\n1.1 Installing R and RStudio\r\n1.2 Updating R and RStudio\r\n1.3 Setting up RStudio Cloud\r\n1.3 Installing R packages\r\n\r\n2. Creating an R project\r\n2.1 Using a project to organize your work\r\n2.2 Working directory structure\r\n2.3 General settings\r\n2.4 Automatically running\r\n\r\n3. Connecting an R project to Github\r\n3.1 Checkinf that RStudio can find Git\r\n3.2 Adding a new R project to GitHub\r\n3.3 Adding an existing R project to GitHub\r\n\r\n\r\nYou need to install R and RStudion on your computers. We will go through the following steps to install two free programs. Also, you’ll understand basic R commands, and the RStudio interface with R in order to start programming.\r\n1. Using Rstudio interact with R\r\n1.1 Installing R and RStudio\r\nR and RStudio are two separate pieces of software:\r\nR is a programming language that is especially powerful for data exploration, visualization, and statistical analysis\r\nRStudio is an integrated development environment (IDE) that makes using R easier\r\nIn this class we will use RStudio to interact with R. The following steps outline a simple and effective process for installing R and RStudio on your computers.\r\nWindows\r\nDownload R from CRAN. Run the .exe file that was just downloaded.\r\nNext to RStudio to download the RStudio Installer for Windows, and double click the file to install it.\r\nA good practice to install RTools, corresponding to R version, for building R and R packages from source on Windows.\r\nOnce installed, open RStudio to make sure it works and you don’t get any error messages.\r\nMacOS\r\nGo to CRAN, and select the <mark style=“background-color: #F0F0F0”.pkg file for the latest R version. Double click on the downloaded file to install R.\r\nA good idea to install XQuartz (needed by some packages).\r\nGo to RStudio to download the RStudio Installer for MacOS. Double click the file to install RStudio.\r\nOnce installed, open RStudio to make sure it works and you don’t get any error messages.\r\nLinux\r\nFollow the instructions from CRAN, run\r\nsudo apt-get install r-base for Debian/Ubuntu and sudo yum install R for Fedora, but the installed versions of R are usually out of date.\r\nGo to RStudio, select the version that matches your distribution to run sudo dpkg -i rstudio-YYYY.MM.X-ZZZ-amd64.deb for Debian/Ubuntu at the terminal.\r\nOnce installed, open RStudio to make sure it works and you don’t get any error messages.\r\nIf R and RStudio are installed, determine whether your R and RStudio versions are necessary to up to date.\r\n1.2 Updating R and RStudio\r\nUpdating R\r\nOpening RStudio, your R version will be printed in the console. Alternatively, you can type sessionInfo() into the console. If the R version is 4.0.0 or later, don’t need to update R for this class. If the version of R is older than that, download and install the latest version of R.\r\nIt is not necessary to remove old versions of R from your system,\r\nbut if you wish to do so you can check\r\nHow do I uninstall R?.\r\nNormally, your old code should still work after updating your R version. But if breaking changes happen, it is useful to know that you have multiple versions of R installed in parallel and that you can switch between them in RStudio by going to Tools > Global Options > General > Basic\r\nAfter installing a new version of R, you will have to reinstall all your packages with the new one. For Windows, there is a package called installr that can help you with upgrading your R version and migrate your package library.\r\nUpdating RStudio\r\nTo update RStudio, open RStudio and click on\r\nHelp > Check for Updates. If a new version is available, RStudio will automatically notify you every once in a while.\r\n1.3 Setting up RStudio Cloud\r\nIf it isn’t feasible to install R and RStudio Desktop on your computer, you can use RStudio Cloud and run R in an online browser window. For this purpose, you need to sign up and create a new account of RStudio Cloud.\r\n\r\n\r\nSetting up\r\nGo to https://rstudio.cloud/.\r\nSign up with an email and create a password of your choice.\r\nSign In.\r\nNavigating\r\nOnce log in, you should look for a few things. On the left hand side, you should see column that displays your “Spaces”, you can check for Learning, as well as some additional info on the system status and terms and conditions.\r\n\r\nOn the right hand side, you should see a small chart showing your Account Usage. This is what you want to keep track of. Depending on how much time you spend actually running code, your time will vary, but the standard free account provides 15 hours per month.\r\nGetting Setup\r\nClick on New Project, and wait a second for things to initialize.\r\nName your project.\r\nCopy and install the packages we’ll need.\r\nCheck everything is installed…you should get TRUE’s if everything worked.\r\n1.3 Installing R packages\r\nMost of the work in R is done by basic functions, which are wrapped into packages. Except for basic functions, R packages have build-in sample data sets.\r\nBy default, a set of R packages is installed during R installation. There also are many packages that are needed to install later from the central repositories like CRAN or Bioconductor, as well as developer repositories like R-Forge(https://r-forge.r-project.org/) or GitHub.\r\nInstalling R packages\r\nTo install R packages, open RStudio and copy and paste the following command into the console window, then execute the command.\r\nInstalling from CRAN\r\n\r\n\r\ninstall.packages(\"tidyverse\")\r\ninstall.packages(\"RSQLite\")\r\n# Alternatively\r\ninstall.packages(c(\"tidyverse\", \"RSQLite\"))\r\n\r\n\r\nInstalling from GitHub\r\n\r\n\r\ninstall.packages (\"devtools\")\r\ndevtools::install_github (\"grssnbchr/hexbin\")\r\n\r\n\r\nInstalling from R-Forge\r\n\r\n\r\n#install.packages(\"patchwork\", repos=\"http://R-Forge.R-project.org\")\r\n\r\n\r\nAlternatively, you can install the packages using RStudio interface by going to Tools > Install Packages and typing the names of the packages separated by a comma.\r\nWhen the installation has finished, you can try to load the\r\npackages by pasting the following code into the console:\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(hexbin)\r\nlibrary(patchwork)\r\nlibrary(RSQLite)\r\n\r\n\r\nUpdating R packages\r\nIt is recommended to keep your R version and all packages up to date. To update the packages that you have installed, click Update in the Packages tab in the bottom right panel of RStudio, or go to Tools > Check for Package Updates....\r\n2. Creating an R project\r\n2.1 Using a project to organize your work\r\nWhen using R several years ago, it is ususally to first set a working directory using setwd(), which takes an absolute file path as an input and sets it as the current working directory of the R process, and to then use getwd() for finding out whether the current working directory is correctly set. The problem with this approach is that since setwd() relies on an absolute file path. This makes the links break very easily, and very difficult to share your analysis with others.\r\nAn RStudio project solves the problem of ‘fragile’ file paths by making file paths relative. An RStudio projects is the file that sits in the root directory, with the extension .Rproj. When your RStudio session is running through .Rproj, the current working directory points to the root folder where that .Rproj file is saved.\r\nThis .Rproj file can be created by going to File > New Project… in RStudio, which is then link a specified folder or directory that is stand-alone and portable. You can reading data from or writing data to files within this directory, except for cases where your analysis requires interacting with an Internet data source, such as web-scraping. When opening an existing project, you will open the .Rproj file and subsequently open R scripts (extensions with .R) from the RStudio session, rather than going to the R scripts to open them. There are lots of documents on RStudio projects, which have detail information on .RData and .Rhistory files.\r\n2.2 Working directory structure\r\nThis directory structure ‘template’ can provide a good starting point for organizing projects if workflow is new to you. However, different projects will have different needs, and thus one should think about what is needed and what will happen while setting up the working directory structure. A template of an R project like this:\r\nThe data folder\r\nThe data folder is is the subfolder where data are stored. They include any source files, such as SPSS, Excel/CSV or .RDS., and some generated ones. Someone would like to split the subfolder into three parts:\r\na data/raw/ folder, which is usually is symlinked to a folder that is read-only to the R user\r\na data/temp/ folder, which contains temp data\r\na data/output/ folder, if warranted\r\nThe src folder\r\nThis folder stores R script files (with the extension .R) and Rmarkdown ones (with the extension .Rmd) for data analysis and visualization. There are three types of R scripts:\r\nScripts: It is helpful to separate multiple scripts for different tasks on a single data set. Most analysis R scripts are saved here. But the key analysis script is better to be stored lonely.\r\nFunctions: It is optional whether you have your custom functions saved in a separate sub-folder. If you want to re-use a function that you remember you’ve written in a particular project, I can at a quick glance browse all the functions you’ve written for that project. Saving functions separately accompanies a workflow where you use source() to read functions into the ‘main analysis script’, rather than having it together with main analysis.\r\nRMarkdown: RMarkdown files are a special case, as they work slightly differently to .R files in terms of file paths, i.e. they behave like mini projects of their own, where the default working directory is where the Rmd file is saved. To save RMarkdown files in this set up, it’s recommended that you use the {here} package and its workflow. Alternatively, you can run knitr::opts_knit$set(root.dir = “../”) in your setup chunk so that the working directory is set in the root directory rather than another sub-folder where the RMarkdown file is saved (less ideal than using here package and its workflow). You briefly discussed a directory structure for combining multiple RMarkdown files into a single long RMarkdown document.\r\nThe output folder\r\nIn Output folder, save all your outputs here, including plots, HTML, and data exports.\r\nHaving this Output folder helps others identify what files are outputs of the code, as opposed to source files that were used to produce the analysis.\r\nWhat you have set up as the sub-folders don’t matter too much, as long as they’re sensible. Normally, the output folders structure as output/ figs/ or output/ plots/, rather than top-tier folders. They also include word or PDF report results. You may decide to set up the sub-folders so that they align with the analysis rather than type of file export.\r\nThe timed_fn() function from my package surveytoolbox (available on GitHub) helps create timestamps for file names, which you use often to ensure that you don’t lose work when you am iterating analysis.\r\n2.3 General settings\r\nThe requirement.R file: In this case, you should have a requirements.R file. Running it for fundamental settings you like to rely on, such as setting the locale appropriately. It also includes a CRAN install check script, although the Packrat package is advised to use.\r\nUsing keyring package: The keyring package, which interacts with OS X’s keychain, Windows’s Credential Store and the Secret Service API on Linux (where supported)\r\nUsing environment variables: Using environment variables to hold certain secrets has become extremely popular especially for Dockerised implementations of R code, as envvars can be very easily set using Docker. If you create an envfile called .Renviron in the working directory, it will store values in the environment.\r\nUsing a .gitignored secret file: config is a package that allows you to keep a range of configuration settings outside your code, in a YAML file, then retrieve them. You can create a default configuration for an API. A dedicated secrets file is a better place for credentials than a config file, as this file can then be wholesale .gitignore.\r\n2.4 Automatically running\r\nThere is a main runner script or potentially a small number. These go through scripts in a sequence. It is a sensible idea in such a case to establish sequential subfolders or sequentially numbered scripts that are executed in sequence. Typically, this model performs better if there are at most a handful distinct pipelines.\r\n3. Connecting an R project to Github\r\n3.1 Checkinf that RStudio can find Git\r\nThe first task is to ensure that Git can be located by RStudio on your machine. To do this, open RStudio and go to Tools > Global Options > Git/SVN.\r\nUnder “Git executable”, you should be able to see a path to Git. Take ubuntu as example, it will be in /usr/bin/git.\r\nIf Git is not in this location or you want to check where the Git executable path is, open the Command Prompt in ubuntu or Windows terminal. Type where git to reveal the Git executable file path.\r\nIf it doesn’t match the dialogue box in RStudio, click on “Browse…” and navigate to your Git executable file. Once complete, press “OK”.\r\n3.2 Adding a new R project to GitHub\r\nIf you want to start a new RStudio project and have it backed-up on GitHub, follow the following steps:\r\nFirstly, create an acount of Github, and a new repository on the GitHub website. You can choose public or private for your visibility setting\r\nNext, open up RStudio and go to File > New Project… > Version Control, and click on the “Git” option\r\nFill in the URL of the new GitHub repository that you just created in the “Repository URL”“Project Directory Name” will auto-fill. Click on “Open in New Session” and then click on “Create Project”. A new project window will open up in RStudio containing your new project. You will notice that it will contain some files under the “Files” window including .gitignore, .Rproj and README.md. The last file was pulled-down from your GitHub repository\r\nNext, to demonstrate how changes can be saved, you will create a new script file and add some code. This will then be saved locally. Following that, you will “push” my changes to GitHub so that my changes are also saved remotely. To do this, go to File > New File > R Script in RStudio. Write an R script and save it\r\nThis has saved your work to your computer, but not to GitHub. For saving to GitHub, go to the “Git” tab in the upper right pane. Check the “Staged” box for any files whose existence or modifications you want to commit\r\nClick on “Commit” and a new dialogue box will open. Under “Commit Message”, add a brief description of the changes that you have made\r\nClick on “Commit”. A Git Commit dialogue box will be displayed showing that the files are committed to GitHub. You may close this second window by clicking “Close”\r\nComplete the final step by pressing Push. This will upload the R files to GitHub. You will see a dialogue box come up confirming this in the form of a string followed by HEAD -> main\r\n3.3 Adding an existing R project to GitHub\r\nIf you have an existing project in RStudio and decide later that maintaining version control in GitHub would be a good idea, follow the steps:\r\nFirstly, create a new repository on GitHub via the website, and choose a repository name like above\r\nNext, open the Command Prompt (or ubuntu terminal) and go to the folder that contains your existing R project, then substitute the URL for your GitHub repository address for remote add origin and push by performing the following codes\r\n\r\n\r\n# git remote add origin https://github.com/yourusername/yourrepo\r\n# git pull origin main\r\n# git push -u origin main\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-10-13T23:39:53+08:00"
    },
    {
      "path": "index.html",
      "title": "Data-Driven Ecology",
      "author": [],
      "contents": "\r\n\r\n          \r\n          \r\n          Home\r\n          \r\n          \r\n          About the Class\r\n          Getting Started\r\n          \r\n          \r\n          Lessons\r\n           \r\n          ▾\r\n          \r\n          \r\n          General Overview\r\n          Data and Models\r\n          \r\n          \r\n          Blog\r\n          ☰\r\n          \r\n          \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Data-Driven Ecology\r\n            \r\n            \r\n              \r\n                \r\n                    \r\n                      \r\n                         GitHub\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                         Email\r\n                      \r\n                    \r\n                  \r\n                                  \r\n            \r\n          \r\n        \r\n        \r\n        \r\n          \r\n            \r\n            Welcome!\r\n            \r\n            \r\n            \r\n            \r\n            This class walks participants through the steps required\r\n            to use R for a wide array of data analysis relevant to\r\n            research in biology and ecology.\r\n            The core skills we will cover are as follows:\r\n            best practices in data retriever, management, and\r\n            visualization\r\n            basic knowledge about data analysis with machine\r\n            learning methods\r\n            beneficial practices in modeling complex patterns and\r\n            processes\r\n            The class is extremely participatory, where a lot of\r\n            training modules are delivered based on the learner’s\r\n            needs.\r\n            \r\n          \r\n        \r\n      \r\n    \r\n\r\n    \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Data-Driven Ecology\r\n            \r\n            \r\n              \r\n                \r\n                                    \r\n                    \r\n                       GitHub\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                       Email\r\n                    \r\n                  \r\n                                  \r\n              \r\n            \r\n            \r\n              \r\n              Welcome!\r\n              \r\n              \r\n              \r\n              \r\n              This class walks participants through the steps\r\n              required to use R for a wide array of data analysis\r\n              relevant to research in biology and ecology.\r\n              The core skills we will cover are as follows:\r\n              best practices in data retriever, management, and\r\n              visualization\r\n              basic knowledge about data analysis with machine\r\n              learning methods\r\n              beneficial practices in modeling complex patterns and\r\n              processes\r\n              The class is extremely participatory, where a lot of\r\n              training modules are delivered based on the learner’s\r\n              needs.\r\n              \r\n            \r\n        \r\n      \r\n    \r\n\r\n    \r\n    \r\n    ",
      "last_modified": "2023-10-13T23:39:53+08:00"
    }
  ],
  "collections": []
}
